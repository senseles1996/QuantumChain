Transforming the Bitcoin Core source code into a new blockchain called QuantumChain with the given requirements is a complex task that involves deep understanding of the Bitcoin Core codebase, the Crystals-Dilithium quantum-resistant encryption, and blockchain technology in general. The task also requires advanced programming skills, particularly in C++ and Python, which are the main languages used in the Bitcoin Core codebase.

Here's a high-level overview of the steps you would need to take:

1. **Replace all references to Bitcoin with QuantumChain**: This involves a simple find-and-replace operation in the entire codebase. However, care must be taken to ensure that the replacement doesn't affect the functionality of the code.

2. **Replace the ECDSA cryptographic algorithm with Crystals-Dilithium quantum-resistant encryption**: This is a complex task that involves understanding how the ECDSA algorithm is used in the Bitcoin Core codebase and how the Crystals-Dilithium algorithm works. The Crystals-Dilithium algorithm would need to be implemented in C++ or Python and integrated into the QuantumChain codebase.

3. **Add a premine feature**: This involves modifying the code that generates the genesis block (the first block in the blockchain) to include a transaction that transfers 1,000,000 tokens to the owner.

4. **Maintain a fixed supply of 21 million tokens**: This involves modifying the code that controls the creation of new tokens to ensure that the total supply never exceeds 21 million.

5. **Introduce advanced dynamic consensus mechanisms**: This is a complex task that involves understanding how the current consensus mechanism works and designing a new mechanism that can adapt to network conditions.

6. **Integrate interoperability tools**: This involves understanding how other blockchain networks work and designing and implementing tools that allow QuantumChain to communicate with these networks.

7. **Create a sustainable and eco-friendly proof-of-stake or hybrid consensus mechanism**: This involves designing and implementing a new consensus mechanism that requires less energy than the current proof-of-work mechanism.

8. **Incorporate modular smart contract templates**: This involves designing and implementing a system for creating and managing smart contracts.

9. **Implement a quantum-resistant wallet system**: This involves understanding how the current wallet system works and designing and implementing a new system that uses quantum-resistant encryption.

10. **Add comprehensive logging and comments**: This involves adding code to log important events and adding comments to explain the code.

11. **Ensure the final code is fully functional**: This involves testing the code to ensure that it works as expected.

Please note that this is a high-level overview and the actual implementation would be much more complex and time-consuming. It would likely require a team of experienced developers and several months of work.