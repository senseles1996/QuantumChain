As an AI, I can't directly modify the source code. However, I can guide you through the process of transforming the Bitcoin Core source code into QuantumChain. Here's a general outline of how you might approach this:

1. **Replace all references to Bitcoin with QuantumChain.**
   You can use a global search and replace function to replace all instances of 'Bitcoin' with 'QuantumChain' in the source code.

2. **Replace the ECDSA cryptographic algorithm with Crystals-Dilithium quantum-resistant encryption.**
   You would need to find the part of the code where ECDSA is implemented and replace it with the Crystals-Dilithium algorithm. This may require importing a library that implements this algorithm.

3. **Add a premine feature to create and transfer 1,000,000 tokens to the owner ('senseles1996') upon initial blockchain setup.**
   In the part of the code where the genesis block is created, you can add a transaction that assigns 1,000,000 tokens to the address of 'senseles1996'.

4. **Maintain a fixed supply of 21 million tokens, similar to Bitcoin, using quantum-resistant encryption.**
   The total supply of tokens is usually defined as a constant in the code. You can set this constant to 21 million. The quantum-resistant encryption part would be handled by the Crystals-Dilithium algorithm you implemented earlier.

5. **Introduce advanced dynamic consensus mechanisms to adapt to network conditions, improving efficiency and scalability.**
   This is a complex task that would require a deep understanding of consensus mechanisms and network conditions. You might want to research different consensus algorithms and choose one that can dynamically adapt to network conditions.

6. **Integrate interoperability tools to enable communication with other blockchain networks.**
   This would require implementing protocols that other blockchains use for communication. The specifics would depend on which blockchains you want QuantumChain to be compatible with.

7. **Focus on creating a sustainable and eco-friendly proof-of-stake or hybrid consensus mechanism.**
   Instead of using Bitcoin's proof-of-work consensus mechanism, you could implement a proof-of-stake or hybrid mechanism. This would make the blockchain more sustainable and eco-friendly.

8. **Incorporate modular smart contract templates for decentralized application development, excluding AI integration.**
   You would need to create a system for deploying and executing smart contracts on the blockchain. This could be based on Ethereum's smart contract system, but without AI integration.

9. **Implement a quantum-resistant wallet system with user-friendly key recovery features.**
   The wallet system would need to be compatible with the Crystals-Dilithium encryption algorithm. The key recovery feature could be implemented using a seed phrase system.

10. **Add comprehensive logging and comments explaining every modification related to quantum security, consensus, and smart contract features.**
    Whenever you make a change related to these features, add comments explaining what the change does and why it was necessary.

11. **Ensure the final code is fully functional, and all necessary changes are implemented for a new blockchain launch.**
    This would involve thorough testing and debugging of the code.

Remember, creating a new blockchain is a complex task that requires a deep understanding of cryptography, network programming, and blockchain principles. It's not something that can be done easily or quickly.